"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsonpath-plus";
exports.ids = ["vendor-chunks/jsonpath-plus"];
exports.modules = {

/***/ "(ssr)/./node_modules/jsonpath-plus/dist/index-node-cjs.js":
/*!***********************************************************!*\
  !*** ./node_modules/jsonpath-plus/dist/index-node-cjs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar vm = __webpack_require__(/*! vm */ \"vm\");\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar vm__default = /*#__PURE__*/_interopDefaultLegacy(vm);\n\nconst {\n  hasOwnProperty: hasOwnProp\n} = Object.prototype;\n/**\n* @typedef {null|boolean|number|string|PlainObject|GenericArray} JSONObject\n*/\n\n/**\n * Copies array and then pushes item into it.\n * @param {GenericArray} arr Array to copy and into which to push\n * @param {any} item Array item to add (to end)\n * @returns {GenericArray} Copy of the original array\n */\n\nfunction push(arr, item) {\n  arr = arr.slice();\n  arr.push(item);\n  return arr;\n}\n/**\n * Copies array and then unshifts item into it.\n * @param {any} item Array item to add (to beginning)\n * @param {GenericArray} arr Array to copy and into which to unshift\n * @returns {GenericArray} Copy of the original array\n */\n\n\nfunction unshift(item, arr) {\n  arr = arr.slice();\n  arr.unshift(item);\n  return arr;\n}\n/**\n * Caught when JSONPath is used without `new` but rethrown if with `new`\n * @extends Error\n */\n\n\nclass NewError extends Error {\n  /**\n   * @param {any} value The evaluated scalar value\n   */\n  constructor(value) {\n    super('JSONPath should not be called with \"new\" (it prevents return ' + 'of (unwrapped) scalar values)');\n    this.avoidNew = true;\n    this.value = value;\n    this.name = 'NewError';\n  }\n\n}\n/**\n* @typedef {PlainObject} ReturnObject\n* @property {string} path\n* @property {JSONObject} value\n* @property {PlainObject|GenericArray} parent\n* @property {string} parentProperty\n*/\n\n/**\n* @callback JSONPathCallback\n* @param {string|PlainObject} preferredOutput\n* @param {\"value\"|\"property\"} type\n* @param {ReturnObject} fullRetObj\n* @returns {void}\n*/\n\n/**\n* @callback OtherTypeCallback\n* @param {JSONObject} val\n* @param {string} path\n* @param {PlainObject|GenericArray} parent\n* @param {string} parentPropName\n* @returns {boolean}\n*/\n\n/* eslint-disable max-len -- Can make multiline type after https://github.com/syavorsky/comment-parser/issues/109 */\n\n/**\n * @typedef {PlainObject} JSONPathOptions\n * @property {JSON} json\n * @property {string|string[]} path\n * @property {\"value\"|\"path\"|\"pointer\"|\"parent\"|\"parentProperty\"|\"all\"} [resultType=\"value\"]\n * @property {boolean} [flatten=false]\n * @property {boolean} [wrap=true]\n * @property {PlainObject} [sandbox={}]\n * @property {boolean} [preventEval=false]\n * @property {PlainObject|GenericArray|null} [parent=null]\n * @property {string|null} [parentProperty=null]\n * @property {JSONPathCallback} [callback]\n * @property {OtherTypeCallback} [otherTypeCallback] Defaults to\n *   function which throws on encountering `@other`\n * @property {boolean} [autostart=true]\n */\n\n/* eslint-enable max-len -- Can make multiline type after https://github.com/syavorsky/comment-parser/issues/109 */\n\n/**\n * @param {string|JSONPathOptions} opts If a string, will be treated as `expr`\n * @param {string} [expr] JSON path to evaluate\n * @param {JSON} [obj] JSON object to evaluate against\n * @param {JSONPathCallback} [callback] Passed 3 arguments: 1) desired payload\n *     per `resultType`, 2) `\"value\"|\"property\"`, 3) Full returned object with\n *     all payloads\n * @param {OtherTypeCallback} [otherTypeCallback] If `@other()` is at the end\n *   of one's query, this will be invoked with the value of the item, its\n *   path, its parent, and its parent's property name, and it should return\n *   a boolean indicating whether the supplied value belongs to the \"other\"\n *   type or not (or it may handle transformations and return `false`).\n * @returns {JSONPath}\n * @class\n */\n\n\nfunction JSONPath(opts, expr, obj, callback, otherTypeCallback) {\n  // eslint-disable-next-line no-restricted-syntax\n  if (!(this instanceof JSONPath)) {\n    try {\n      return new JSONPath(opts, expr, obj, callback, otherTypeCallback);\n    } catch (e) {\n      if (!e.avoidNew) {\n        throw e;\n      }\n\n      return e.value;\n    }\n  }\n\n  if (typeof opts === 'string') {\n    otherTypeCallback = callback;\n    callback = obj;\n    obj = expr;\n    expr = opts;\n    opts = null;\n  }\n\n  const optObj = opts && typeof opts === 'object';\n  opts = opts || {};\n  this.json = opts.json || obj;\n  this.path = opts.path || expr;\n  this.resultType = opts.resultType || 'value';\n  this.flatten = opts.flatten || false;\n  this.wrap = hasOwnProp.call(opts, 'wrap') ? opts.wrap : true;\n  this.sandbox = opts.sandbox || {};\n  this.preventEval = opts.preventEval || false;\n  this.parent = opts.parent || null;\n  this.parentProperty = opts.parentProperty || null;\n  this.callback = opts.callback || callback || null;\n\n  this.otherTypeCallback = opts.otherTypeCallback || otherTypeCallback || function () {\n    throw new TypeError('You must supply an otherTypeCallback callback option ' + 'with the @other() operator.');\n  };\n\n  if (opts.autostart !== false) {\n    const args = {\n      path: optObj ? opts.path : expr\n    };\n\n    if (!optObj) {\n      args.json = obj;\n    } else if ('json' in opts) {\n      args.json = opts.json;\n    }\n\n    const ret = this.evaluate(args);\n\n    if (!ret || typeof ret !== 'object') {\n      throw new NewError(ret);\n    }\n\n    return ret;\n  }\n} // PUBLIC METHODS\n\n\nJSONPath.prototype.evaluate = function (expr, json, callback, otherTypeCallback) {\n  let currParent = this.parent,\n      currParentProperty = this.parentProperty;\n  let {\n    flatten,\n    wrap\n  } = this;\n  this.currResultType = this.resultType;\n  this.currPreventEval = this.preventEval;\n  this.currSandbox = this.sandbox;\n  callback = callback || this.callback;\n  this.currOtherTypeCallback = otherTypeCallback || this.otherTypeCallback;\n  json = json || this.json;\n  expr = expr || this.path;\n\n  if (expr && typeof expr === 'object' && !Array.isArray(expr)) {\n    if (!expr.path && expr.path !== '') {\n      throw new TypeError('You must supply a \"path\" property when providing an object ' + 'argument to JSONPath.evaluate().');\n    }\n\n    if (!hasOwnProp.call(expr, 'json')) {\n      throw new TypeError('You must supply a \"json\" property when providing an object ' + 'argument to JSONPath.evaluate().');\n    }\n\n    ({\n      json\n    } = expr);\n    flatten = hasOwnProp.call(expr, 'flatten') ? expr.flatten : flatten;\n    this.currResultType = hasOwnProp.call(expr, 'resultType') ? expr.resultType : this.currResultType;\n    this.currSandbox = hasOwnProp.call(expr, 'sandbox') ? expr.sandbox : this.currSandbox;\n    wrap = hasOwnProp.call(expr, 'wrap') ? expr.wrap : wrap;\n    this.currPreventEval = hasOwnProp.call(expr, 'preventEval') ? expr.preventEval : this.currPreventEval;\n    callback = hasOwnProp.call(expr, 'callback') ? expr.callback : callback;\n    this.currOtherTypeCallback = hasOwnProp.call(expr, 'otherTypeCallback') ? expr.otherTypeCallback : this.currOtherTypeCallback;\n    currParent = hasOwnProp.call(expr, 'parent') ? expr.parent : currParent;\n    currParentProperty = hasOwnProp.call(expr, 'parentProperty') ? expr.parentProperty : currParentProperty;\n    expr = expr.path;\n  }\n\n  currParent = currParent || null;\n  currParentProperty = currParentProperty || null;\n\n  if (Array.isArray(expr)) {\n    expr = JSONPath.toPathString(expr);\n  }\n\n  if (!expr && expr !== '' || !json) {\n    return undefined;\n  }\n\n  const exprList = JSONPath.toPathArray(expr);\n\n  if (exprList[0] === '$' && exprList.length > 1) {\n    exprList.shift();\n  }\n\n  this._hasParentSelector = null;\n\n  const result = this._trace(exprList, json, ['$'], currParent, currParentProperty, callback).filter(function (ea) {\n    return ea && !ea.isParentSelector;\n  });\n\n  if (!result.length) {\n    return wrap ? [] : undefined;\n  }\n\n  if (!wrap && result.length === 1 && !result[0].hasArrExpr) {\n    return this._getPreferredOutput(result[0]);\n  }\n\n  return result.reduce((rslt, ea) => {\n    const valOrPath = this._getPreferredOutput(ea);\n\n    if (flatten && Array.isArray(valOrPath)) {\n      rslt = rslt.concat(valOrPath);\n    } else {\n      rslt.push(valOrPath);\n    }\n\n    return rslt;\n  }, []);\n}; // PRIVATE METHODS\n\n\nJSONPath.prototype._getPreferredOutput = function (ea) {\n  const resultType = this.currResultType;\n\n  switch (resultType) {\n    case 'all':\n      {\n        const path = Array.isArray(ea.path) ? ea.path : JSONPath.toPathArray(ea.path);\n        ea.pointer = JSONPath.toPointer(path);\n        ea.path = typeof ea.path === 'string' ? ea.path : JSONPath.toPathString(ea.path);\n        return ea;\n      }\n\n    case 'value':\n    case 'parent':\n    case 'parentProperty':\n      return ea[resultType];\n\n    case 'path':\n      return JSONPath.toPathString(ea[resultType]);\n\n    case 'pointer':\n      return JSONPath.toPointer(ea.path);\n\n    default:\n      throw new TypeError('Unknown result type');\n  }\n};\n\nJSONPath.prototype._handleCallback = function (fullRetObj, callback, type) {\n  if (callback) {\n    const preferredOutput = this._getPreferredOutput(fullRetObj);\n\n    fullRetObj.path = typeof fullRetObj.path === 'string' ? fullRetObj.path : JSONPath.toPathString(fullRetObj.path); // eslint-disable-next-line node/callback-return\n\n    callback(preferredOutput, type, fullRetObj);\n  }\n};\n/**\n *\n * @param {string} expr\n * @param {JSONObject} val\n * @param {string} path\n * @param {PlainObject|GenericArray} parent\n * @param {string} parentPropName\n * @param {JSONPathCallback} callback\n * @param {boolean} hasArrExpr\n * @param {boolean} literalPriority\n * @returns {ReturnObject|ReturnObject[]}\n */\n\n\nJSONPath.prototype._trace = function (expr, val, path, parent, parentPropName, callback, hasArrExpr, literalPriority) {\n  // No expr to follow? return path and value as the result of\n  //  this trace branch\n  let retObj;\n\n  if (!expr.length) {\n    retObj = {\n      path,\n      value: val,\n      parent,\n      parentProperty: parentPropName,\n      hasArrExpr\n    };\n\n    this._handleCallback(retObj, callback, 'value');\n\n    return retObj;\n  }\n\n  const loc = expr[0],\n        x = expr.slice(1); // We need to gather the return value of recursive trace calls in order to\n  // do the parent sel computation.\n\n  const ret = [];\n  /**\n   *\n   * @param {ReturnObject|ReturnObject[]} elems\n   * @returns {void}\n   */\n\n  function addRet(elems) {\n    if (Array.isArray(elems)) {\n      // This was causing excessive stack size in Node (with or\n      //  without Babel) against our performance test:\n      //  `ret.push(...elems);`\n      elems.forEach(t => {\n        ret.push(t);\n      });\n    } else {\n      ret.push(elems);\n    }\n  }\n\n  if ((typeof loc !== 'string' || literalPriority) && val && hasOwnProp.call(val, loc)) {\n    // simple case--directly follow property\n    addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr)); // eslint-disable-next-line unicorn/prefer-switch -- Part of larger `if`\n  } else if (loc === '*') {\n    // all child properties\n    this._walk(loc, x, val, path, parent, parentPropName, callback, (m, l, _x, v, p, par, pr, cb) => {\n      addRet(this._trace(unshift(m, _x), v, p, par, pr, cb, true, true));\n    });\n  } else if (loc === '..') {\n    // all descendent parent properties\n    // Check remaining expression with val's immediate children\n    addRet(this._trace(x, val, path, parent, parentPropName, callback, hasArrExpr));\n\n    this._walk(loc, x, val, path, parent, parentPropName, callback, (m, l, _x, v, p, par, pr, cb) => {\n      // We don't join m and x here because we only want parents,\n      //   not scalar values\n      if (typeof v[m] === 'object') {\n        // Keep going with recursive descent on val's\n        //   object children\n        addRet(this._trace(unshift(l, _x), v[m], push(p, m), v, m, cb, true));\n      }\n    }); // The parent sel computation is handled in the frame above using the\n    // ancestor object of val\n\n  } else if (loc === '^') {\n    // This is not a final endpoint, so we do not invoke the callback here\n    this._hasParentSelector = true;\n    return {\n      path: path.slice(0, -1),\n      expr: x,\n      isParentSelector: true\n    };\n  } else if (loc === '~') {\n    // property name\n    retObj = {\n      path: push(path, loc),\n      value: parentPropName,\n      parent,\n      parentProperty: null\n    };\n\n    this._handleCallback(retObj, callback, 'property');\n\n    return retObj;\n  } else if (loc === '$') {\n    // root only\n    addRet(this._trace(x, val, path, null, null, callback, hasArrExpr));\n  } else if (/^(-?\\d*):(-?\\d*):?(\\d*)$/u.test(loc)) {\n    // [start:end:step]  Python slice syntax\n    addRet(this._slice(loc, x, val, path, parent, parentPropName, callback));\n  } else if (loc.indexOf('?(') === 0) {\n    // [?(expr)] (filtering)\n    if (this.currPreventEval) {\n      throw new Error('Eval [?(expr)] prevented in JSONPath expression.');\n    }\n\n    this._walk(loc, x, val, path, parent, parentPropName, callback, (m, l, _x, v, p, par, pr, cb) => {\n      if (this._eval(l.replace(/^\\?\\((.*?)\\)$/u, '$1'), v[m], m, p, par, pr)) {\n        addRet(this._trace(unshift(m, _x), v, p, par, pr, cb, true));\n      }\n    });\n  } else if (loc[0] === '(') {\n    // [(expr)] (dynamic property/index)\n    if (this.currPreventEval) {\n      throw new Error('Eval [(expr)] prevented in JSONPath expression.');\n    } // As this will resolve to a property name (but we don't know it\n    //  yet), property and parent information is relative to the\n    //  parent of the property to which this expression will resolve\n\n\n    addRet(this._trace(unshift(this._eval(loc, val, path[path.length - 1], path.slice(0, -1), parent, parentPropName), x), val, path, parent, parentPropName, callback, hasArrExpr));\n  } else if (loc[0] === '@') {\n    // value type: @boolean(), etc.\n    let addType = false;\n    const valueType = loc.slice(1, -2);\n\n    switch (valueType) {\n      case 'scalar':\n        if (!val || !['object', 'function'].includes(typeof val)) {\n          addType = true;\n        }\n\n        break;\n\n      case 'boolean':\n      case 'string':\n      case 'undefined':\n      case 'function':\n        // eslint-disable-next-line valid-typeof\n        if (typeof val === valueType) {\n          addType = true;\n        }\n\n        break;\n\n      case 'integer':\n        if (Number.isFinite(val) && !(val % 1)) {\n          addType = true;\n        }\n\n        break;\n\n      case 'number':\n        if (Number.isFinite(val)) {\n          addType = true;\n        }\n\n        break;\n\n      case 'nonFinite':\n        if (typeof val === 'number' && !Number.isFinite(val)) {\n          addType = true;\n        }\n\n        break;\n\n      case 'object':\n        // eslint-disable-next-line valid-typeof\n        if (val && typeof val === valueType) {\n          addType = true;\n        }\n\n        break;\n\n      case 'array':\n        if (Array.isArray(val)) {\n          addType = true;\n        }\n\n        break;\n\n      case 'other':\n        addType = this.currOtherTypeCallback(val, path, parent, parentPropName);\n        break;\n\n      case 'null':\n        if (val === null) {\n          addType = true;\n        }\n\n        break;\n\n      /* istanbul ignore next */\n\n      default:\n        throw new TypeError('Unknown value type ' + valueType);\n    }\n\n    if (addType) {\n      retObj = {\n        path,\n        value: val,\n        parent,\n        parentProperty: parentPropName\n      };\n\n      this._handleCallback(retObj, callback, 'value');\n\n      return retObj;\n    } // `-escaped property\n\n  } else if (loc[0] === '`' && val && hasOwnProp.call(val, loc.slice(1))) {\n    const locProp = loc.slice(1);\n    addRet(this._trace(x, val[locProp], push(path, locProp), val, locProp, callback, hasArrExpr, true));\n  } else if (loc.includes(',')) {\n    // [name1,name2,...]\n    const parts = loc.split(',');\n\n    for (const part of parts) {\n      addRet(this._trace(unshift(part, x), val, path, parent, parentPropName, callback, true));\n    } // simple case--directly follow property\n\n  } else if (!literalPriority && val && hasOwnProp.call(val, loc)) {\n    addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr, true));\n  } // We check the resulting values for parent selections. For parent\n  // selections we discard the value object and continue the trace with the\n  // current val object\n\n\n  if (this._hasParentSelector) {\n    for (let t = 0; t < ret.length; t++) {\n      const rett = ret[t];\n\n      if (rett && rett.isParentSelector) {\n        const tmp = this._trace(rett.expr, val, rett.path, parent, parentPropName, callback, hasArrExpr);\n\n        if (Array.isArray(tmp)) {\n          ret[t] = tmp[0];\n          const tl = tmp.length;\n\n          for (let tt = 1; tt < tl; tt++) {\n            t++;\n            ret.splice(t, 0, tmp[tt]);\n          }\n        } else {\n          ret[t] = tmp;\n        }\n      }\n    }\n  }\n\n  return ret;\n};\n\nJSONPath.prototype._walk = function (loc, expr, val, path, parent, parentPropName, callback, f) {\n  if (Array.isArray(val)) {\n    const n = val.length;\n\n    for (let i = 0; i < n; i++) {\n      f(i, loc, expr, val, path, parent, parentPropName, callback);\n    }\n  } else if (val && typeof val === 'object') {\n    Object.keys(val).forEach(m => {\n      f(m, loc, expr, val, path, parent, parentPropName, callback);\n    });\n  }\n};\n\nJSONPath.prototype._slice = function (loc, expr, val, path, parent, parentPropName, callback) {\n  if (!Array.isArray(val)) {\n    return undefined;\n  }\n\n  const len = val.length,\n        parts = loc.split(':'),\n        step = parts[2] && Number.parseInt(parts[2]) || 1;\n  let start = parts[0] && Number.parseInt(parts[0]) || 0,\n      end = parts[1] && Number.parseInt(parts[1]) || len;\n  start = start < 0 ? Math.max(0, start + len) : Math.min(len, start);\n  end = end < 0 ? Math.max(0, end + len) : Math.min(len, end);\n  const ret = [];\n\n  for (let i = start; i < end; i += step) {\n    const tmp = this._trace(unshift(i, expr), val, path, parent, parentPropName, callback, true); // Should only be possible to be an array here since first part of\n    //   ``unshift(i, expr)` passed in above would not be empty, nor `~`,\n    //     nor begin with `@` (as could return objects)\n    // This was causing excessive stack size in Node (with or\n    //  without Babel) against our performance test: `ret.push(...tmp);`\n\n\n    tmp.forEach(t => {\n      ret.push(t);\n    });\n  }\n\n  return ret;\n};\n\nJSONPath.prototype._eval = function (code, _v, _vname, path, parent, parentPropName) {\n  if (code.includes('@parentProperty')) {\n    this.currSandbox._$_parentProperty = parentPropName;\n    code = code.replace(/@parentProperty/gu, '_$_parentProperty');\n  }\n\n  if (code.includes('@parent')) {\n    this.currSandbox._$_parent = parent;\n    code = code.replace(/@parent/gu, '_$_parent');\n  }\n\n  if (code.includes('@property')) {\n    this.currSandbox._$_property = _vname;\n    code = code.replace(/@property/gu, '_$_property');\n  }\n\n  if (code.includes('@path')) {\n    this.currSandbox._$_path = JSONPath.toPathString(path.concat([_vname]));\n    code = code.replace(/@path/gu, '_$_path');\n  }\n\n  if (code.includes('@root')) {\n    this.currSandbox._$_root = this.json;\n    code = code.replace(/@root/gu, '_$_root');\n  }\n\n  if (/@([.\\s)[])/u.test(code)) {\n    this.currSandbox._$_v = _v;\n    code = code.replace(/@([.\\s)[])/gu, '_$_v$1');\n  }\n\n  try {\n    return this.vm.runInNewContext(code, this.currSandbox);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(e);\n    throw new Error('jsonPath: ' + e.message + ': ' + code);\n  }\n}; // PUBLIC CLASS PROPERTIES AND METHODS\n// Could store the cache object itself\n\n\nJSONPath.cache = {};\n/**\n * @param {string[]} pathArr Array to convert\n * @returns {string} The path string\n */\n\nJSONPath.toPathString = function (pathArr) {\n  const x = pathArr,\n        n = x.length;\n  let p = '$';\n\n  for (let i = 1; i < n; i++) {\n    if (!/^(~|\\^|@.*?\\(\\))$/u.test(x[i])) {\n      p += /^[0-9*]+$/u.test(x[i]) ? '[' + x[i] + ']' : \"['\" + x[i] + \"']\";\n    }\n  }\n\n  return p;\n};\n/**\n * @param {string} pointer JSON Path\n * @returns {string} JSON Pointer\n */\n\n\nJSONPath.toPointer = function (pointer) {\n  const x = pointer,\n        n = x.length;\n  let p = '';\n\n  for (let i = 1; i < n; i++) {\n    if (!/^(~|\\^|@.*?\\(\\))$/u.test(x[i])) {\n      p += '/' + x[i].toString().replace(/~/gu, '~0').replace(/\\//gu, '~1');\n    }\n  }\n\n  return p;\n};\n/**\n * @param {string} expr Expression to convert\n * @returns {string[]}\n */\n\n\nJSONPath.toPathArray = function (expr) {\n  const {\n    cache\n  } = JSONPath;\n\n  if (cache[expr]) {\n    return cache[expr].concat();\n  }\n\n  const subx = [];\n  const normalized = expr // Properties\n  .replace(/@(?:null|boolean|number|string|integer|undefined|nonFinite|scalar|array|object|function|other)\\(\\)/gu, ';$&;') // Parenthetical evaluations (filtering and otherwise), directly\n  //   within brackets or single quotes\n  .replace(/[['](\\??\\(.*?\\))[\\]']/gu, function ($0, $1) {\n    return '[#' + (subx.push($1) - 1) + ']';\n  }) // Escape periods and tildes within properties\n  .replace(/\\[['\"]([^'\\]]*)['\"]\\]/gu, function ($0, prop) {\n    return \"['\" + prop.replace(/\\./gu, '%@%').replace(/~/gu, '%%@@%%') + \"']\";\n  }) // Properties operator\n  .replace(/~/gu, ';~;') // Split by property boundaries\n  .replace(/['\"]?\\.['\"]?(?![^[]*\\])|\\[['\"]?/gu, ';') // Reinsert periods within properties\n  .replace(/%@%/gu, '.') // Reinsert tildes within properties\n  .replace(/%%@@%%/gu, '~') // Parent\n  .replace(/(?:;)?(\\^+)(?:;)?/gu, function ($0, ups) {\n    return ';' + ups.split('').join(';') + ';';\n  }) // Descendents\n  .replace(/;;;|;;/gu, ';..;') // Remove trailing\n  .replace(/;$|'?\\]|'$/gu, '');\n  const exprList = normalized.split(';').map(function (exp) {\n    const match = exp.match(/#(\\d+)/u);\n    return !match || !match[1] ? exp : subx[match[1]];\n  });\n  cache[expr] = exprList;\n  return cache[expr].concat();\n};\n\nJSONPath.prototype.vm = vm__default['default'];\n\nexports.JSONPath = JSONPath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonpath-plus/dist/index-node-cjs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/jsonpath-plus/dist/index-node-cjs.js":
/*!***********************************************************!*\
  !*** ./node_modules/jsonpath-plus/dist/index-node-cjs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar vm = __webpack_require__(/*! vm */ \"vm\");\nfunction _interopDefaultLegacy(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        \"default\": e\n    };\n}\nvar vm__default = /*#__PURE__*/ _interopDefaultLegacy(vm);\nconst { hasOwnProperty: hasOwnProp } = Object.prototype;\n/**\n* @typedef {null|boolean|number|string|PlainObject|GenericArray} JSONObject\n*/ /**\n * Copies array and then pushes item into it.\n * @param {GenericArray} arr Array to copy and into which to push\n * @param {any} item Array item to add (to end)\n * @returns {GenericArray} Copy of the original array\n */ function push(arr, item) {\n    arr = arr.slice();\n    arr.push(item);\n    return arr;\n}\n/**\n * Copies array and then unshifts item into it.\n * @param {any} item Array item to add (to beginning)\n * @param {GenericArray} arr Array to copy and into which to unshift\n * @returns {GenericArray} Copy of the original array\n */ function unshift(item, arr) {\n    arr = arr.slice();\n    arr.unshift(item);\n    return arr;\n}\n/**\n * Caught when JSONPath is used without `new` but rethrown if with `new`\n * @extends Error\n */ class NewError extends Error {\n    /**\n   * @param {any} value The evaluated scalar value\n   */ constructor(value){\n        super('JSONPath should not be called with \"new\" (it prevents return ' + \"of (unwrapped) scalar values)\");\n        this.avoidNew = true;\n        this.value = value;\n        this.name = \"NewError\";\n    }\n}\n/**\n* @typedef {PlainObject} ReturnObject\n* @property {string} path\n* @property {JSONObject} value\n* @property {PlainObject|GenericArray} parent\n* @property {string} parentProperty\n*/ /**\n* @callback JSONPathCallback\n* @param {string|PlainObject} preferredOutput\n* @param {\"value\"|\"property\"} type\n* @param {ReturnObject} fullRetObj\n* @returns {void}\n*/ /**\n* @callback OtherTypeCallback\n* @param {JSONObject} val\n* @param {string} path\n* @param {PlainObject|GenericArray} parent\n* @param {string} parentPropName\n* @returns {boolean}\n*/ /* eslint-disable max-len -- Can make multiline type after https://github.com/syavorsky/comment-parser/issues/109 */ /**\n * @typedef {PlainObject} JSONPathOptions\n * @property {JSON} json\n * @property {string|string[]} path\n * @property {\"value\"|\"path\"|\"pointer\"|\"parent\"|\"parentProperty\"|\"all\"} [resultType=\"value\"]\n * @property {boolean} [flatten=false]\n * @property {boolean} [wrap=true]\n * @property {PlainObject} [sandbox={}]\n * @property {boolean} [preventEval=false]\n * @property {PlainObject|GenericArray|null} [parent=null]\n * @property {string|null} [parentProperty=null]\n * @property {JSONPathCallback} [callback]\n * @property {OtherTypeCallback} [otherTypeCallback] Defaults to\n *   function which throws on encountering `@other`\n * @property {boolean} [autostart=true]\n */ /* eslint-enable max-len -- Can make multiline type after https://github.com/syavorsky/comment-parser/issues/109 */ /**\n * @param {string|JSONPathOptions} opts If a string, will be treated as `expr`\n * @param {string} [expr] JSON path to evaluate\n * @param {JSON} [obj] JSON object to evaluate against\n * @param {JSONPathCallback} [callback] Passed 3 arguments: 1) desired payload\n *     per `resultType`, 2) `\"value\"|\"property\"`, 3) Full returned object with\n *     all payloads\n * @param {OtherTypeCallback} [otherTypeCallback] If `@other()` is at the end\n *   of one's query, this will be invoked with the value of the item, its\n *   path, its parent, and its parent's property name, and it should return\n *   a boolean indicating whether the supplied value belongs to the \"other\"\n *   type or not (or it may handle transformations and return `false`).\n * @returns {JSONPath}\n * @class\n */ function JSONPath(opts, expr, obj, callback, otherTypeCallback) {\n    // eslint-disable-next-line no-restricted-syntax\n    if (!(this instanceof JSONPath)) {\n        try {\n            return new JSONPath(opts, expr, obj, callback, otherTypeCallback);\n        } catch (e) {\n            if (!e.avoidNew) {\n                throw e;\n            }\n            return e.value;\n        }\n    }\n    if (typeof opts === \"string\") {\n        otherTypeCallback = callback;\n        callback = obj;\n        obj = expr;\n        expr = opts;\n        opts = null;\n    }\n    const optObj = opts && typeof opts === \"object\";\n    opts = opts || {};\n    this.json = opts.json || obj;\n    this.path = opts.path || expr;\n    this.resultType = opts.resultType || \"value\";\n    this.flatten = opts.flatten || false;\n    this.wrap = hasOwnProp.call(opts, \"wrap\") ? opts.wrap : true;\n    this.sandbox = opts.sandbox || {};\n    this.preventEval = opts.preventEval || false;\n    this.parent = opts.parent || null;\n    this.parentProperty = opts.parentProperty || null;\n    this.callback = opts.callback || callback || null;\n    this.otherTypeCallback = opts.otherTypeCallback || otherTypeCallback || function() {\n        throw new TypeError(\"You must supply an otherTypeCallback callback option \" + \"with the @other() operator.\");\n    };\n    if (opts.autostart !== false) {\n        const args = {\n            path: optObj ? opts.path : expr\n        };\n        if (!optObj) {\n            args.json = obj;\n        } else if (\"json\" in opts) {\n            args.json = opts.json;\n        }\n        const ret = this.evaluate(args);\n        if (!ret || typeof ret !== \"object\") {\n            throw new NewError(ret);\n        }\n        return ret;\n    }\n} // PUBLIC METHODS\nJSONPath.prototype.evaluate = function(expr, json, callback, otherTypeCallback) {\n    let currParent = this.parent, currParentProperty = this.parentProperty;\n    let { flatten, wrap } = this;\n    this.currResultType = this.resultType;\n    this.currPreventEval = this.preventEval;\n    this.currSandbox = this.sandbox;\n    callback = callback || this.callback;\n    this.currOtherTypeCallback = otherTypeCallback || this.otherTypeCallback;\n    json = json || this.json;\n    expr = expr || this.path;\n    if (expr && typeof expr === \"object\" && !Array.isArray(expr)) {\n        if (!expr.path && expr.path !== \"\") {\n            throw new TypeError('You must supply a \"path\" property when providing an object ' + \"argument to JSONPath.evaluate().\");\n        }\n        if (!hasOwnProp.call(expr, \"json\")) {\n            throw new TypeError('You must supply a \"json\" property when providing an object ' + \"argument to JSONPath.evaluate().\");\n        }\n        ({ json } = expr);\n        flatten = hasOwnProp.call(expr, \"flatten\") ? expr.flatten : flatten;\n        this.currResultType = hasOwnProp.call(expr, \"resultType\") ? expr.resultType : this.currResultType;\n        this.currSandbox = hasOwnProp.call(expr, \"sandbox\") ? expr.sandbox : this.currSandbox;\n        wrap = hasOwnProp.call(expr, \"wrap\") ? expr.wrap : wrap;\n        this.currPreventEval = hasOwnProp.call(expr, \"preventEval\") ? expr.preventEval : this.currPreventEval;\n        callback = hasOwnProp.call(expr, \"callback\") ? expr.callback : callback;\n        this.currOtherTypeCallback = hasOwnProp.call(expr, \"otherTypeCallback\") ? expr.otherTypeCallback : this.currOtherTypeCallback;\n        currParent = hasOwnProp.call(expr, \"parent\") ? expr.parent : currParent;\n        currParentProperty = hasOwnProp.call(expr, \"parentProperty\") ? expr.parentProperty : currParentProperty;\n        expr = expr.path;\n    }\n    currParent = currParent || null;\n    currParentProperty = currParentProperty || null;\n    if (Array.isArray(expr)) {\n        expr = JSONPath.toPathString(expr);\n    }\n    if (!expr && expr !== \"\" || !json) {\n        return undefined;\n    }\n    const exprList = JSONPath.toPathArray(expr);\n    if (exprList[0] === \"$\" && exprList.length > 1) {\n        exprList.shift();\n    }\n    this._hasParentSelector = null;\n    const result = this._trace(exprList, json, [\n        \"$\"\n    ], currParent, currParentProperty, callback).filter(function(ea) {\n        return ea && !ea.isParentSelector;\n    });\n    if (!result.length) {\n        return wrap ? [] : undefined;\n    }\n    if (!wrap && result.length === 1 && !result[0].hasArrExpr) {\n        return this._getPreferredOutput(result[0]);\n    }\n    return result.reduce((rslt, ea)=>{\n        const valOrPath = this._getPreferredOutput(ea);\n        if (flatten && Array.isArray(valOrPath)) {\n            rslt = rslt.concat(valOrPath);\n        } else {\n            rslt.push(valOrPath);\n        }\n        return rslt;\n    }, []);\n}; // PRIVATE METHODS\nJSONPath.prototype._getPreferredOutput = function(ea) {\n    const resultType = this.currResultType;\n    switch(resultType){\n        case \"all\":\n            {\n                const path = Array.isArray(ea.path) ? ea.path : JSONPath.toPathArray(ea.path);\n                ea.pointer = JSONPath.toPointer(path);\n                ea.path = typeof ea.path === \"string\" ? ea.path : JSONPath.toPathString(ea.path);\n                return ea;\n            }\n        case \"value\":\n        case \"parent\":\n        case \"parentProperty\":\n            return ea[resultType];\n        case \"path\":\n            return JSONPath.toPathString(ea[resultType]);\n        case \"pointer\":\n            return JSONPath.toPointer(ea.path);\n        default:\n            throw new TypeError(\"Unknown result type\");\n    }\n};\nJSONPath.prototype._handleCallback = function(fullRetObj, callback, type) {\n    if (callback) {\n        const preferredOutput = this._getPreferredOutput(fullRetObj);\n        fullRetObj.path = typeof fullRetObj.path === \"string\" ? fullRetObj.path : JSONPath.toPathString(fullRetObj.path); // eslint-disable-next-line node/callback-return\n        callback(preferredOutput, type, fullRetObj);\n    }\n};\n/**\n *\n * @param {string} expr\n * @param {JSONObject} val\n * @param {string} path\n * @param {PlainObject|GenericArray} parent\n * @param {string} parentPropName\n * @param {JSONPathCallback} callback\n * @param {boolean} hasArrExpr\n * @param {boolean} literalPriority\n * @returns {ReturnObject|ReturnObject[]}\n */ JSONPath.prototype._trace = function(expr, val, path, parent, parentPropName, callback, hasArrExpr, literalPriority) {\n    // No expr to follow? return path and value as the result of\n    //  this trace branch\n    let retObj;\n    if (!expr.length) {\n        retObj = {\n            path,\n            value: val,\n            parent,\n            parentProperty: parentPropName,\n            hasArrExpr\n        };\n        this._handleCallback(retObj, callback, \"value\");\n        return retObj;\n    }\n    const loc = expr[0], x = expr.slice(1); // We need to gather the return value of recursive trace calls in order to\n    // do the parent sel computation.\n    const ret = [];\n    /**\n   *\n   * @param {ReturnObject|ReturnObject[]} elems\n   * @returns {void}\n   */ function addRet(elems) {\n        if (Array.isArray(elems)) {\n            // This was causing excessive stack size in Node (with or\n            //  without Babel) against our performance test:\n            //  `ret.push(...elems);`\n            elems.forEach((t)=>{\n                ret.push(t);\n            });\n        } else {\n            ret.push(elems);\n        }\n    }\n    if ((typeof loc !== \"string\" || literalPriority) && val && hasOwnProp.call(val, loc)) {\n        // simple case--directly follow property\n        addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr)); // eslint-disable-next-line unicorn/prefer-switch -- Part of larger `if`\n    } else if (loc === \"*\") {\n        // all child properties\n        this._walk(loc, x, val, path, parent, parentPropName, callback, (m, l, _x, v, p, par, pr, cb)=>{\n            addRet(this._trace(unshift(m, _x), v, p, par, pr, cb, true, true));\n        });\n    } else if (loc === \"..\") {\n        // all descendent parent properties\n        // Check remaining expression with val's immediate children\n        addRet(this._trace(x, val, path, parent, parentPropName, callback, hasArrExpr));\n        this._walk(loc, x, val, path, parent, parentPropName, callback, (m, l, _x, v, p, par, pr, cb)=>{\n            // We don't join m and x here because we only want parents,\n            //   not scalar values\n            if (typeof v[m] === \"object\") {\n                // Keep going with recursive descent on val's\n                //   object children\n                addRet(this._trace(unshift(l, _x), v[m], push(p, m), v, m, cb, true));\n            }\n        }); // The parent sel computation is handled in the frame above using the\n    // ancestor object of val\n    } else if (loc === \"^\") {\n        // This is not a final endpoint, so we do not invoke the callback here\n        this._hasParentSelector = true;\n        return {\n            path: path.slice(0, -1),\n            expr: x,\n            isParentSelector: true\n        };\n    } else if (loc === \"~\") {\n        // property name\n        retObj = {\n            path: push(path, loc),\n            value: parentPropName,\n            parent,\n            parentProperty: null\n        };\n        this._handleCallback(retObj, callback, \"property\");\n        return retObj;\n    } else if (loc === \"$\") {\n        // root only\n        addRet(this._trace(x, val, path, null, null, callback, hasArrExpr));\n    } else if (/^(-?\\d*):(-?\\d*):?(\\d*)$/u.test(loc)) {\n        // [start:end:step]  Python slice syntax\n        addRet(this._slice(loc, x, val, path, parent, parentPropName, callback));\n    } else if (loc.indexOf(\"?(\") === 0) {\n        // [?(expr)] (filtering)\n        if (this.currPreventEval) {\n            throw new Error(\"Eval [?(expr)] prevented in JSONPath expression.\");\n        }\n        this._walk(loc, x, val, path, parent, parentPropName, callback, (m, l, _x, v, p, par, pr, cb)=>{\n            if (this._eval(l.replace(/^\\?\\((.*?)\\)$/u, \"$1\"), v[m], m, p, par, pr)) {\n                addRet(this._trace(unshift(m, _x), v, p, par, pr, cb, true));\n            }\n        });\n    } else if (loc[0] === \"(\") {\n        // [(expr)] (dynamic property/index)\n        if (this.currPreventEval) {\n            throw new Error(\"Eval [(expr)] prevented in JSONPath expression.\");\n        } // As this will resolve to a property name (but we don't know it\n        //  yet), property and parent information is relative to the\n        //  parent of the property to which this expression will resolve\n        addRet(this._trace(unshift(this._eval(loc, val, path[path.length - 1], path.slice(0, -1), parent, parentPropName), x), val, path, parent, parentPropName, callback, hasArrExpr));\n    } else if (loc[0] === \"@\") {\n        // value type: @boolean(), etc.\n        let addType = false;\n        const valueType = loc.slice(1, -2);\n        switch(valueType){\n            case \"scalar\":\n                if (!val || ![\n                    \"object\",\n                    \"function\"\n                ].includes(typeof val)) {\n                    addType = true;\n                }\n                break;\n            case \"boolean\":\n            case \"string\":\n            case \"undefined\":\n            case \"function\":\n                // eslint-disable-next-line valid-typeof\n                if (typeof val === valueType) {\n                    addType = true;\n                }\n                break;\n            case \"integer\":\n                if (Number.isFinite(val) && !(val % 1)) {\n                    addType = true;\n                }\n                break;\n            case \"number\":\n                if (Number.isFinite(val)) {\n                    addType = true;\n                }\n                break;\n            case \"nonFinite\":\n                if (typeof val === \"number\" && !Number.isFinite(val)) {\n                    addType = true;\n                }\n                break;\n            case \"object\":\n                // eslint-disable-next-line valid-typeof\n                if (val && typeof val === valueType) {\n                    addType = true;\n                }\n                break;\n            case \"array\":\n                if (Array.isArray(val)) {\n                    addType = true;\n                }\n                break;\n            case \"other\":\n                addType = this.currOtherTypeCallback(val, path, parent, parentPropName);\n                break;\n            case \"null\":\n                if (val === null) {\n                    addType = true;\n                }\n                break;\n            /* istanbul ignore next */ default:\n                throw new TypeError(\"Unknown value type \" + valueType);\n        }\n        if (addType) {\n            retObj = {\n                path,\n                value: val,\n                parent,\n                parentProperty: parentPropName\n            };\n            this._handleCallback(retObj, callback, \"value\");\n            return retObj;\n        } // `-escaped property\n    } else if (loc[0] === \"`\" && val && hasOwnProp.call(val, loc.slice(1))) {\n        const locProp = loc.slice(1);\n        addRet(this._trace(x, val[locProp], push(path, locProp), val, locProp, callback, hasArrExpr, true));\n    } else if (loc.includes(\",\")) {\n        // [name1,name2,...]\n        const parts = loc.split(\",\");\n        for (const part of parts){\n            addRet(this._trace(unshift(part, x), val, path, parent, parentPropName, callback, true));\n        } // simple case--directly follow property\n    } else if (!literalPriority && val && hasOwnProp.call(val, loc)) {\n        addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr, true));\n    } // We check the resulting values for parent selections. For parent\n    // selections we discard the value object and continue the trace with the\n    // current val object\n    if (this._hasParentSelector) {\n        for(let t = 0; t < ret.length; t++){\n            const rett = ret[t];\n            if (rett && rett.isParentSelector) {\n                const tmp = this._trace(rett.expr, val, rett.path, parent, parentPropName, callback, hasArrExpr);\n                if (Array.isArray(tmp)) {\n                    ret[t] = tmp[0];\n                    const tl = tmp.length;\n                    for(let tt = 1; tt < tl; tt++){\n                        t++;\n                        ret.splice(t, 0, tmp[tt]);\n                    }\n                } else {\n                    ret[t] = tmp;\n                }\n            }\n        }\n    }\n    return ret;\n};\nJSONPath.prototype._walk = function(loc, expr, val, path, parent, parentPropName, callback, f) {\n    if (Array.isArray(val)) {\n        const n = val.length;\n        for(let i = 0; i < n; i++){\n            f(i, loc, expr, val, path, parent, parentPropName, callback);\n        }\n    } else if (val && typeof val === \"object\") {\n        Object.keys(val).forEach((m)=>{\n            f(m, loc, expr, val, path, parent, parentPropName, callback);\n        });\n    }\n};\nJSONPath.prototype._slice = function(loc, expr, val, path, parent, parentPropName, callback) {\n    if (!Array.isArray(val)) {\n        return undefined;\n    }\n    const len = val.length, parts = loc.split(\":\"), step = parts[2] && Number.parseInt(parts[2]) || 1;\n    let start = parts[0] && Number.parseInt(parts[0]) || 0, end = parts[1] && Number.parseInt(parts[1]) || len;\n    start = start < 0 ? Math.max(0, start + len) : Math.min(len, start);\n    end = end < 0 ? Math.max(0, end + len) : Math.min(len, end);\n    const ret = [];\n    for(let i = start; i < end; i += step){\n        const tmp = this._trace(unshift(i, expr), val, path, parent, parentPropName, callback, true); // Should only be possible to be an array here since first part of\n        //   ``unshift(i, expr)` passed in above would not be empty, nor `~`,\n        //     nor begin with `@` (as could return objects)\n        // This was causing excessive stack size in Node (with or\n        //  without Babel) against our performance test: `ret.push(...tmp);`\n        tmp.forEach((t)=>{\n            ret.push(t);\n        });\n    }\n    return ret;\n};\nJSONPath.prototype._eval = function(code, _v, _vname, path, parent, parentPropName) {\n    if (code.includes(\"@parentProperty\")) {\n        this.currSandbox._$_parentProperty = parentPropName;\n        code = code.replace(/@parentProperty/gu, \"_$_parentProperty\");\n    }\n    if (code.includes(\"@parent\")) {\n        this.currSandbox._$_parent = parent;\n        code = code.replace(/@parent/gu, \"_$_parent\");\n    }\n    if (code.includes(\"@property\")) {\n        this.currSandbox._$_property = _vname;\n        code = code.replace(/@property/gu, \"_$_property\");\n    }\n    if (code.includes(\"@path\")) {\n        this.currSandbox._$_path = JSONPath.toPathString(path.concat([\n            _vname\n        ]));\n        code = code.replace(/@path/gu, \"_$_path\");\n    }\n    if (code.includes(\"@root\")) {\n        this.currSandbox._$_root = this.json;\n        code = code.replace(/@root/gu, \"_$_root\");\n    }\n    if (/@([.\\s)[])/u.test(code)) {\n        this.currSandbox._$_v = _v;\n        code = code.replace(/@([.\\s)[])/gu, \"_$_v$1\");\n    }\n    try {\n        return this.vm.runInNewContext(code, this.currSandbox);\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(e);\n        throw new Error(\"jsonPath: \" + e.message + \": \" + code);\n    }\n}; // PUBLIC CLASS PROPERTIES AND METHODS\n// Could store the cache object itself\nJSONPath.cache = {};\n/**\n * @param {string[]} pathArr Array to convert\n * @returns {string} The path string\n */ JSONPath.toPathString = function(pathArr) {\n    const x = pathArr, n = x.length;\n    let p = \"$\";\n    for(let i = 1; i < n; i++){\n        if (!/^(~|\\^|@.*?\\(\\))$/u.test(x[i])) {\n            p += /^[0-9*]+$/u.test(x[i]) ? \"[\" + x[i] + \"]\" : \"['\" + x[i] + \"']\";\n        }\n    }\n    return p;\n};\n/**\n * @param {string} pointer JSON Path\n * @returns {string} JSON Pointer\n */ JSONPath.toPointer = function(pointer) {\n    const x = pointer, n = x.length;\n    let p = \"\";\n    for(let i = 1; i < n; i++){\n        if (!/^(~|\\^|@.*?\\(\\))$/u.test(x[i])) {\n            p += \"/\" + x[i].toString().replace(/~/gu, \"~0\").replace(/\\//gu, \"~1\");\n        }\n    }\n    return p;\n};\n/**\n * @param {string} expr Expression to convert\n * @returns {string[]}\n */ JSONPath.toPathArray = function(expr) {\n    const { cache } = JSONPath;\n    if (cache[expr]) {\n        return cache[expr].concat();\n    }\n    const subx = [];\n    const normalized = expr // Properties\n    .replace(/@(?:null|boolean|number|string|integer|undefined|nonFinite|scalar|array|object|function|other)\\(\\)/gu, \";$&;\") // Parenthetical evaluations (filtering and otherwise), directly\n    //   within brackets or single quotes\n    .replace(/[['](\\??\\(.*?\\))[\\]']/gu, function($0, $1) {\n        return \"[#\" + (subx.push($1) - 1) + \"]\";\n    }) // Escape periods and tildes within properties\n    .replace(/\\[['\"]([^'\\]]*)['\"]\\]/gu, function($0, prop) {\n        return \"['\" + prop.replace(/\\./gu, \"%@%\").replace(/~/gu, \"%%@@%%\") + \"']\";\n    }) // Properties operator\n    .replace(/~/gu, \";~;\") // Split by property boundaries\n    .replace(/['\"]?\\.['\"]?(?![^[]*\\])|\\[['\"]?/gu, \";\") // Reinsert periods within properties\n    .replace(/%@%/gu, \".\") // Reinsert tildes within properties\n    .replace(/%%@@%%/gu, \"~\") // Parent\n    .replace(/(?:;)?(\\^+)(?:;)?/gu, function($0, ups) {\n        return \";\" + ups.split(\"\").join(\";\") + \";\";\n    }) // Descendents\n    .replace(/;;;|;;/gu, \";..;\") // Remove trailing\n    .replace(/;$|'?\\]|'$/gu, \"\");\n    const exprList = normalized.split(\";\").map(function(exp) {\n        const match = exp.match(/#(\\d+)/u);\n        return !match || !match[1] ? exp : subx[match[1]];\n    });\n    cache[expr] = exprList;\n    return cache[expr].concat();\n};\nJSONPath.prototype.vm = vm__default[\"default\"];\nexports.JSONPath = JSONPath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/jsonpath-plus/dist/index-node-cjs.js\n");

/***/ })

};
;